# -*- coding: utf-8 -*-
"""earthquake

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DB4NHvyaW9yx9HzisZMRlIHE8U2Gptdv

#*Loading the dataset and converting in the form of a dataframe*
"""

pip install matplotlib seaborn pandas

import pandas as pd
hi= pd.read_csv('database[2].csv')
df = pd.DataFrame(hi)
print(df)

"""# *Data Cleaning*

# *Removing the unnecessary columns from the dataset*
"""

columns_to_remove = ['ID', 'Source', 'Location Source', 'Magnitude Type', 'Magnitude Source', 'Status',
                     'Depth Error', 'Depth Seismic Stations', 'Magnitude Error',
                     'Magnitude Seismic Stations', 'Azimuthal Gap', 'Horizontal Distance',
                     'Horizontal Error', 'Root Mean Square']

df = df.drop(columns = columns_to_remove)
print(df.head())

"""# *Removing the null values*"""

print(df.isnull().sum())

print(df["Type"].unique())

df = df[df["Type"] == "Earthquake"]
print(df.head())

print(df["Type"].unique())

"""# *Data Describing*"""

print(df["Magnitude"].unique())
print(df["Magnitude"].min())
print(df['Magnitude'].describe())
print(df['Depth'].describe())

"""# *Feature Engineering and Scaling*"""

import numpy as np
df['result'] = np.where(df['Magnitude'] >  5.9 , 1, 0)
df['land'] = np.where(df['Depth'] > 71.5, 1, 0 )
print(df.head())

"""# *  EDA(Exploratory Data Analysis)*"""

import matplotlib.pyplot as plt
import seaborn as sns

sns.set()
plt.figure(figsize=(10, 6))
sns.histplot(df["Magnitude"], kde = True, bins = 30)
plt.title('Distribution of Earthquake Mangnitudes')
plt.xlabel('Magintude')

from sklearn.model_selection import train_test_split
X = df.drop('Type', axis = 1)
y = df['Type']

X_train, x_test, Y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42 )

print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
clt = make_pipeline(StandardScaler(), SVC(gamma = 'auto'))
clt.fit(X, y)